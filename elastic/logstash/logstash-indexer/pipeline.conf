input {
    redis {
        data_type => "list"
        key => "logstash-list"
        host => "localhost"
        port => 6379
        batch_count => 50
        threads => 4
    }

    # beats {
    #     port => 60301
    #     type => "mongo-log"
    # }
}

filter {
    if [type] == "k8s-log" {
        mutate {
          rename => ["log", "message"]
        }

        date {
          match => ["time", "ISO8601"]
          remove_field => ["time"]
        }

        grok {
            match => { "source" => "/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:container_name}-%{DATA:container_id}.log" }
            remove_field => ["source"]
            remove_tag => ["beats_input_codec_plain_applied", "beats_input_raw_event"]
        }
    }

    if [type] == "haproxy-log" {
        # https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/haproxy
        # https://www.haproxy.com/blog/haproxy-log-customization/
        # haproxy log-format: %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %hr\ %hs\ %{+Q}r
        grok {
            match => {"message" => "%{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} (%{INT:time_request:int}/%{INT:time_queue:int}/%{INT:time_backend_connect:int}/%{INT:time_backend_response:int}/%{NOTSPACE:time_duration:int})? %{INT:http_status_code} %{NOTSPACE:bytes_read:int} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?\"?"}
            remove_tag => ["beats_input_codec_plain_applied"]
            remove_field => [
                "haproxy_hour",
                "haproxy_milliseconds",
                "haproxy_minute",
                "haproxy_month",
                "haproxy_monthday",
                "haproxy_second",
                "haproxy_time",
                "haproxy_year"
            ]
        }

        if [captured_request_headers] {
            grok {
                match => {"captured_request_headers" => "^%{DATA:ips}\|%{DATA:req_host}\|%{DATA:req_origin}\|%{DATA:ua}\|%{DATA:device_id}\|%{DATA:acpt_encoding}$"}
                remove_field => ["captured_request_headers"]
            }

            if [ips] {
                split {
                    field => "ips"
                    terminator => ","
                    target => "ips"
                }
                geoip {
                    source => ips
                    remove_field => [
                        "[geoip][continent_code]",
                        "[geoip][country_code2]",
                        "[geoip][country_code3]",
                        "[geoip][latitude]",
                        "[geoip][longitude]",
                        "[geoip][region_code]",
                        "[geoip][timezone]"
                    ]
                }
            }
        }

        date {
           match => [ "accept_date", "dd/MMM/yyyy:HH:mm:ss.SSS"]
           remove_field => [ "accept_date" ]
        }
    }

    if [type] == "mongo-log" {
        grok {
            match => {"message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{MONGO3_SEVERITY:severity}\s+%{MONGO3_COMPONENT:component}\s+(?:\[%{DATA:context}\])?\s+%{GREEDYDATA:message}"}
            overwrite => [ "message" ]
            remove_tag => ["beats_input_codec_plain_applied"]
        }

        if [context] =~ "^conn" {
            grok {
                match => {"context" => "conn%{NUMBER:connect_id:int}"}
                add_tag => ["with_conn_id"]
            }
        }

        if [message] =~ "ms$"  {
            grok {
                match => {"message" => "%{WORD:op_type}\s+.*}.*\}(\s+%{NUMBER:spend_time:int}ms$)?"}
                add_tag => ["op"]
            }
        }

        if [message] =~ "^end\s+connection" {
            grok {
                match => {"message" => "end\s+connection\s+%{IPORHOST:client_ip}:%{NUMBER:client_port:int}.*"}
                add_tag => ["end_connection"]
            }
        }

        if [message] =~ "^connection\s+accepted\s+from" {
            grok {
                match => {"message" => "connection\s+accepted\s+from\s+%{IPORHOST:client_ip}:%{NUMBER:client_port:int}\s+#%{NUMBER:connect_id:int}.*"}
                add_tag => ["start_connection"]
            }
       }

       if [message] =~ "^warning: log line attempted" {
            grok {
                match => {"message" => "warning: log line attempted \(%{NUMBER:log_line_size:int}k\)"}
                add_tag => ["warning", "log_size_over_max"]
            }
       }

       date {
           match => [ "timestamp", "UNIX", "YYYY-MM-dd HH:mm:ss", "ISO8601"]
           remove_field => [ "timestamp" ]
        }
    }

    if [type] == "nodejs-log" {
        json {
            source => "message"
        }

        if ![name] {
            mutate {
                add_field => {
                    "name" => "unknown"
                }
            }
        }

        mutate {
            rename => {
                "name" => "type"
            }
        }

        if [ip] {
            geoip {
                source => ip
                remove_field => [
                    "[geoip][continent_code]",
                    "[geoip][country_code2]",
                    "[geoip][country_code3]",
                    "[geoip][latitude]",
                    "[geoip][longitude]",
                    "[geoip][region_code]",
                    "[geoip][timezone]"
                ]
            }
        }
    }
}

output {
    elasticsearch {
        hosts => ["localhost:9200"]
        codec => "json"
        index => "logstash-%{type}-%{+YYYY.MM.dd}"
        document_type => "%{type}"
    }
}
